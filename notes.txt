/*

1. Binary Representation of a face (64 bit mode)
Squares in the cube go from top left corner (Most Significant Byte) clockwise

1        2        3        4        5        6        7        8
00000000 00000001 00000010 00000011 00000100 00000101 00000000 00000001
White    Green    Red      Blue     Orange   Yellow   White    Green

00000000 00000001 00000010
00000001  center  00000011
00000000 00000101 00000100

   >        >        V    
   ^        .        V
   ^        <        <

 White    Green     Red     
 Green    [    ]    Blue
 White    Yellow    Orange

Notation: WGRBOYWG

Thanks to: https://stackoverflow.com/questions/500221/how-would-you-represent-a-rubiks-cube-in-code
*/

2. Useful positions and algorithms:

- Solved cube:
    BBBBBBBBRRRRRRRRGGGGGGGGOOOOOOOOYYYYYYYYWWWWWWWW

- Calibration scramble:
    U2 D2 F2 L B2 U2 F L2 B F U L B' R' F2 B2 U2 F' B' U D2 F D2 U' R2
    UU DD FF L BB UU F LL B F U L b  r  FF BB UU f  b  U DD F DD u  RR
    Result: RRYYBBRBOGWROGWORGYOGRWWGWYYYBWWGBOYBOBGOWGYROBR

- Algorithms:

Single color center:
    U d B f R l U d
    unisolver -s UdBfRlUd

Chess board pattern:
    U U D D R R L L F F B B
    unisolver -s UUDDRRLLFFBB

- TODO:
    - Keep in mind that you only have 1.5k of memory and 10k of storage
    - Define way of performing algorithms and pattern scans with the cube rotated

    - Optimize rotations ?
    - Improve scrambler ?
    - Create cube position validation function
    - That's enough for a bit there ...
    - Don't squeeze the Charmin

    - Define scanning patterns and algorithms for F2L (1 or 2 weekends)
    - Define scanning patterns and algorithms for OLL (1 to 3 weekends)
    - Define scanning patterns and algorithms for PLL (1 to 3 weekends)

    cube is solved ...

3. Bugs

